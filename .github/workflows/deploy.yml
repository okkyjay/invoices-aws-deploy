name: build-deploy-i

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. Log in to Amazon ECR (for GitHub runner)
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 3. Build, Tag, Push Docker Image
      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          IMAGE_TAG=latest
          ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          REGION=${{ secrets.AWS_REGION }}
          REPO_NAME=invoice-app

          docker build -t $REPO_NAME:$IMAGE_TAG .
          docker tag $REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG
          docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG

      # 4. Deploy to EC2 and setup Nginx
      - name: Deploy to EC2 and configure Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user   # or "ubuntu" depending on AMI
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker & Nginx if not installed
            sudo yum update -y
            sudo yum install -y docker nginx
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo systemctl enable nginx
            sudo systemctl start nginx

            # Login to ECR inside EC2 (fix for "no basic auth credentials")
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            # Configure Nginx reverse proxy
            cat <<EOF | sudo tee /etc/nginx/conf.d/invoice-app.conf
            server {
                listen 80;
                server_name _;
                location / {
                    proxy_pass http://127.0.0.1:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF

            sudo nginx -t
            sudo systemctl reload nginx

            # Pull latest Docker image
            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/invoice-app:latest

            # Stop old container if exists
            sudo docker stop invoice-app || true
            sudo docker rm invoice-app || true

            # Run new container
            sudo docker run -d -p 5000:5000 --name invoice-app \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/invoice-app:latest
